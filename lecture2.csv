"Question","Answer"
"What are the key OS abstractions?","OS provides abstractions like Process/Thread, Files, Address space, CPU, Disk, RAM to hide hardware details from applications【60†source】."
"What is the OS abstraction for CPU?","The OS abstraction for CPU is a process, also known as a job or a task, used to decompose activities into independent tasks【61†source】."
"What is unique about a process's view of the machine?","Each process has its own view including its own virtual memory, virtual CPU, and open files, simplifying the programming model【62†source】."
"What constitutes a process?","A process is a program in execution, containing state needed for program execution: address space, code, data, execution stack, PC, registers, and OS resources【63†source】."
"What is process address space?","Process address space comprises all addresses a process can use, where addresses are virtual, providing isolation and restricted access by other processes【64†source】."
"What does the call stack represent in a process?","The call stack represents the private data for a thread's function invocations, encapsulating each function's state【65†source】."
"How do modern OSes define processes and threads?","A process defines the address space and attributes, while a thread defines an execution stream within a process, and they can interact or work independently【66†source】."
"What is the difference between per-thread state and shared state?","Per-thread state includes code, stack, and registers specific to each thread, while shared state like data segment is common across threads in a process【67†source】."
"How are threads represented in a process?","Threads in a process have individual stacks but share code, static data, and heap segments【68†source】."
"What is the significance of threads in OS?","Threads are units of concurrency, allowing multiple threads to cooperate on a task or share CPUs【69†source】."
"Why are threads necessary in a web server application?","Threads handle multiple simultaneous requests and read web pages from disk to satisfy each request, managing complexity【70†source】."
"What is the downside of handling one request at a time in server applications?","This approach is easy but slow, as it cannot overlap disk requests with computation or network operations【71†source】."
"What is asynchronous I/O in server applications?","Asynchronous I/O issues I/Os without waiting for completion, which is faster but complex due to the need to track multiple states and requests【72†source】."
"What is the advantage of a multi-threaded web server?","It allows one thread per request, enabling other threads to run even if one is blocked on I/O, simplifying state management【73†source】."
"What are the benefits of threads in applications?","Threads enable parallel tasks, are lightweight, allow blocking I/O without stalling other threads, and offer a simpler programming model with private states【74†source】."
"What are the downsides of using threads?","Threads can lead to performance degradation, context switching costs, lock contention, cache misses, and are challenging to synchronize【74†source】."
"When are threads particularly useful?","Threads are useful for managing multiple tasks simultaneously, especially with slow resources like network, disk, or user input【75†source】."
"What is the ideal scenario for using threads in computing?","The ideal use of threads is to split computation where threads can run independently, best suited for divide-and-conquer strategies【76†source】."
"How can threads be dependent in applications?","Threads often need to cooperate, sharing application resources or hardware, as seen in examples like Microsoft Word or a desktop computer running multiple applications【77†source】."
"What is non-determinism in the context of threads?","Non-determinism arises from unpredictable processor speeds and ordering of events across threads, leading to different global orderings of events【78†source】."
"How does non-deterministic ordering affect thread results?","Non-deterministic ordering can lead to varying results depending on the sequence of thread execution, impacting outcomes in multi-threaded applications【79†source】."
"What is an example of non-deterministic results in threads?","An example is an assignment operation in a shared variable by multiple threads, where the final result depends on the order of execution【80†source】."
"What is another example of non-deterministic results with threads?","An arithmetic operation on a shared variable by multiple threads, where the outcome varies based on execution order【81†source】."
"What is the impact of non-deterministic ordering in assignment operations?","Non-deterministic ordering in assignments leads to unpredictable results, demonstrating the complexity of multi-threading【82†source】."
"What are atomic operations in the context of threading?","Atomic operations occur entirely or not at all, without interruption by other threads, forming the basis for larger operations in threading【83†source】."
"What are examples of challenges in thread execution?","Examples include predicting which thread finishes first and whether a thread's completion guarantees its output to be printed first【84†source】."
"Why should developers be concerned about intricate threading scenarios?","Complex threading scenarios can lead to critical issues like the Northeast blackout of 2003 or the Therac-25 incident, highlighting the importance of careful threading design【85†source】."
"How do you write correct concurrent programs?","By considering all possible interleavings of events from multiple threads, ensuring atomic operations lead to correct outcomes, and preventing concurrent non-atomic operations【86†source】."
"What is the goal of synchronization in concurrent programming?","Synchronization aims to ensure that all possible interleavings produce correct results and to constrain thread interleavings as little as necessary【86†source】."
"Why is concurrency important in synchronization?","Concurrency matters only for events that access shared resources, and correct programs should work regardless of CPU execution speed【86†source】."
"What does each process have in a multi-process system?","Each process has its own virtual memory, virtual CPU, and open files, simplifying the programming model."
"How is a process defined in an operating system?","A process is a program in execution, containing all state needed for program execution including memory, code, data, execution stack, PC, registers, and OS resources."
"What is the significance of process address space?","Process address space comprises all virtual addresses a process can use, providing isolation and restricted access by other processes."
"What does a stack frame represent?","A stack frame holds private data for a function invocation."
"How do modern operating systems define the relationship between processes and threads?","In modern OSes, a process defines the address space and attributes, while a thread defines an execution stream within a process."
"What is the distinction between per-thread state and shared state in a process?","Per-thread state includes code, stack, and registers specific to each thread, while shared state like data segment is common across threads in a process."
"How are threads represented in a multi-threaded process?","Threads in a multi-threaded process have individual stacks but share code, static data, and heap segments."
"What are the upcoming topics in EECS 482 related to threads and address spaces?","The course will cover threads and concurrency for about a month and then address spaces for a couple of weeks."
"Why are threads needed in a web server application?","Threads in a web server handle multiple simultaneous requests and read web pages from disk to satisfy each request."
"What is the drawback of handling one request at a time in server applications?","This approach is slow and cannot overlap disk requests with computation or network operations."
"What is asynchronous I/O in server applications?","Asynchronous I/O issues disk I/Os without waiting for completion, handling multiple requests simultaneously."
"What is the benefit of a multi-threaded web server?","A multi-threaded web server allows one thread per request, enabling other threads to run even if one is blocked on I/O."
"What are the benefits of using threads in applications?","Threads enable parallel tasks, are lightweight, allow blocking I/O without stalling other threads, and offer a simpler programming model with private states."
"What are the challenges associated with using threads?","Threads can lead to performance degradation, context switching costs, lock contention, and are difficult to synchronize."
"When are threads especially useful?","Threads are useful for handling multiple tasks simultaneously, particularly with slow resources like network, disk, or user input."
"What is the ideal scenario for thread usage?","The ideal scenario for threads is to split computation where threads run independently, best suited for divide-and-conquer strategies."
"How do threads interact in applications like Microsoft Word or a desktop computer?","Threads often need to cooperate, sharing resources as seen in applications where one thread performs one task while another does something different."
"What is the problem of non-determinism in threading?","Non-determinism arises from unpredictable processor speeds and the ordering of events across threads."
"How does non-deterministic ordering affect results in multi-threaded applications?","Non-deterministic ordering can lead to varying results depending on the sequence of thread execution."
"What are examples of non-deterministic results in threads?","Examples include varying outcomes in assignment operations or arithmetic operations on shared variables due to different execution orders."
"What are atomic operations in threading?","Atomic operations in threading are indivisible operations that occur entirely or not at all, with no interruption by other threads."
"Why are far-fetched threading scenarios important to consider?","Complex threading scenarios can lead to critical issues and make debugging challenging due to non-deterministic interleaving."
"What is the goal of writing correct concurrent programs?","The goal is to control all possible interleavings of events from multiple threads to ensure correct outcomes."
"What are the goals of synchronization in concurrent programming?","Synchronization aims to ensure all possible interleavings produce correct results and to constrain thread interleavings as necessary."
"Why is concurrency important in synchronization?","Concurrency matters only for events that access shared resources, and correct programs should work regardless of CPU execution speed."
"What does a process's view include in a multi-process system?","Each process's view includes its own virtual memory, virtual CPU, and open files."
"What is contained in a process?","A process contains state needed for execution: memory, code, data, execution stack, PC, registers, and OS resources."
"What is provided by process address space?","Process address space provides isolation and prevents access by other processes without permission."
"What is the purpose of a stack frame?","A stack frame holds private data for a function invocation within a process."
"What is the distinction between a process and a thread?","A process defines the address space and general attributes, while a thread defines an execution stream within a process."